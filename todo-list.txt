DON'T FORGET ABOUT UNIT TESTS

Release 1.0:
-make more kinds of enemies (i.e. not variations of hunters or dummies)
    -zig-zaggers
    -boundary-gliders
    -giant square dummy
    -giant square hunter
    -small, really fast one; waypoint rarely set
    -faster different-colored versions of the enemies
    -ambusher; waypoint is set to where the player is headed
    -enemy that alters between small and big sprite each time interval
    -make hunters less circular and more rectangular?
-level design and game play:
    -make enemies disappear before a level is finished (by editing level data)
        -could test
    -make game have total of 40 levels; use pencil and paper
    -change player spacecrafts' speeds to all three have good chance
-main activity
    -main menu background image
    -include some sort of directions (e.g. keep eye on distance remaining,
    tap left and right halves of screen)
-make HUD beautiful-er; see Google Images for inspiration
-put number of unit tests in readme?
-upload app on Google Play

Considerable:
-consider scaling everything, so it all looks the same on every device
    --may not be needed
    --look into eBook (i.e. "Android Game Development by Example")
    for discussion about this topic
    --since a dust speck is a pixel, could make number of specks
    depend on number of pixels, and then just scale the bitmaps
        --PROBLEM: all crafts move more slowly on bigger devices
            --could compensate by editing speed
            --could do what was done in eBook's Chapter 5
-put finish line sprite at goal distance
-special effects when the user is almost at the goal; e.g.:
    -screen could have flashes of red
    -alarm sound effects could play
-implement explosion (via sprite sheet) when user's spacecraft explodes
-combine all images into one sprite sheet
-enemies that shoot
-could restart level data by iterating through and adjusting each's
hasSpawned member
-look into reading data from text files
    -doesn't seem to have any benefit in this context, since the files would
    still have to be deployed
-use unit test to check for invalid level data
    -check both "debugging" and "non-debugging levels"
    -criteria for being invalid:
        -background music isn't set
        -any enemy's beginning distance is past goal distance?
-don't allow the player to pause
    -call mBackgroundMusic.release() in SGView.pause()
-player's spacecraft's speed could increase as levels progress