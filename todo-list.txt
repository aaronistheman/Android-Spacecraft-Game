Next: TRY MERGING MULTIPLE BRANCHES FOR PRACTICE
-make some levels, each different distance
    -print level number in HUD
    -advance to next level after completion; max five levels
        -restartGame() should restart game at first level
        -make function goToNextLevel()
    -tell user when beat non-final level or beat final level or lost
    -make sure current level is kept if player dies
    -change background music based on level data
-look into reading data from text files
-can choose between three different spacecrafts of varying speed, size,
and shape
-make more kinds of enemies

Eventually:
-main activity
    -main menu background image
    -include some sort of directions (e.g. keep eye on distance remaining,
    tap left and right halves of screen)
-delete activity_main.xml
-improve playability
    -make sure spacecrafts' speeds and sizes are all great
-stop the player's horizontal movement after victory

Considerable:
-ways for the user to change his spacecraft's vertical speed
-put finish line sprite at goal distance
-special effects when the user is almost at the goal; e.g.:
    -screen could have flashes of red
    -alarm sound effects could play
-implement explosion (via sprite sheet) when user's spacecraft explodes
-combine all images into one sprite sheet
-enemies that shoot
-sound when enemy respawns (would this play too frequently?)
-hunter's horizontal speed has some randomness and/or gradual increase
-don't update the shown distance remaining as frequently (since the tens
and ones digits could be distracting)
-consider scaling everything, so it all looks the same on every device
    --look into eBook for discussion about this topic
    --since a dust speck is a pixel, could make number of specks
    depend on number of pixels, and then just scale the bitmaps
        --PROBLEM: all crafts move more slowly on bigger devices
            --could compensate by editing speed
            --could do what was done in eBook's Chapter 5
-rocks (as obstacles)
-change sound effects


Remove this information at some point (It's only here in case I need
to look at something in it):
-find the bug regarding CopyOnWriteArrayList.remove() in spawnEnemies()
    -current guess of the problem: The user's input is handled in
    a thread separate from the one handling the bulk of the game.
    That input thread allows the user to restart the game by
    tapping, causing restartGame to be called. restartGame
    calls restartEnemyData(), which changes mEnemyData. My educated
    guess, supported by the logged data, is that mEnemyData is
    edited while the following for loop is running:
        for (int i = 0; i < mEnemyData.size(); ++i)
    in spawnEnemies(), and that for loop's version of mEnemyData
    isn't protected (by the properties of CopyOnWriteArrayList)
    because an iterator technically isn't used.
    -possible remedies:
        -PICKED THIS ONE:
            -don't remove enemy data; instead, give each data a "hasSpawned"
            member
        -look into what the C5 Platformer does; it's worth noting
        that it pauses the game after a restart. Perhaps this
        pausing does something like pause the thread.
        -temporarily disable restarting, finish the current feature,
        and decide when to fix the problem later
        -use mutexes
        -model the game after the Tanks one (i.e. without threads);
        would only work if can check for touch, rather than
        react to it
        -using an iterator (and its remove function) and thus not
        a thread-safe ArrayList; would have to change some things
        to support this